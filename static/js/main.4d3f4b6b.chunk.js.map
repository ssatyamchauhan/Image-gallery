{"version":3,"sources":["components/Gallery/Gallery.jsx","App.js","serviceWorker.js","index.js"],"names":["Geometries","Gallery","props","useState","containerWidth","geometry","boxes","state","setState","resizeGeometry","width","window","innerWidth","JLayout","useEffect","addEventListener","map","box","i","style","left","top","height","key","className","src","data","url","alt","containerHeight","App","galleryData","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPAMMA,G,MAAa,CACjB,GACA,IACA,EACA,IACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,GACA,IACA,EACA,MAGa,SAASC,EAAQC,GAAQ,IAAD,EAEXC,mBAAS,CACjCC,eAAgB,EAChBC,SAAU,CAAEC,MAAO,MAJgB,mBAE9BC,EAF8B,KAEvBC,EAFuB,KAOjCC,EAAiB,WACnB,IAAIC,EAAQC,OAAOC,WAAa,GAEhCJ,EAAS,eACJD,EADG,CAENH,eAAgBM,EAChBL,SAAUQ,IAAQb,EAAY,CAAEI,eAAgBM,QAIpDI,qBAAU,WACRL,IAEAE,OAAOI,iBAAiB,SAAUN,KACjC,IAEH,IAAIH,EAAQC,EAAMF,SAASC,MAAMU,KAAI,SAACC,EAAKC,GACzC,IAAIC,EAAQ,CACVC,KAAMH,EAAIG,KACVC,IAAKJ,EAAII,IACTX,MAAOO,EAAIP,MACXY,OAAQL,EAAIK,QAEd,OACE,yBACEC,IAAKL,EACLM,UAAU,MACVL,MAAOA,EACPM,IAAKvB,EAAMwB,KAAKR,GAAGS,IACnBC,IAAK1B,EAAMwB,KAAKR,GAAGU,SAKzB,OACE,yBACEJ,UAAU,UACVL,MAAO,CACLG,OAAQf,EAAMF,SAASwB,gBAAkB,KACzCnB,MAAOH,EAAMH,eAAiB,OAG/BE,G,WC/CQwB,EApBI,WACjB,OACE,yBAAKN,UAAU,OAYb,kBAACvB,EAAD,CAASyB,KAAMK,MCRDC,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4d3f4b6b.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport JLayout from \"justified-layout\";\nimport \"../../App.css\";\n/*\n * Make this component\n */\nconst Geometries = [\n  0.5,\n  1.5,\n  1,\n  1.8,\n  0.4,\n  0.7,\n  0.9,\n  1.1,\n  1.7,\n  2.2,\n  1.5,\n  0.5,\n  1.5,\n  1,\n  1.8\n];\n\nexport default function Gallery(props) {\n\n  const [state, setState] = useState({\n    containerWidth: 0,\n    geometry: { boxes: [] }\n  });\n\n  let resizeGeometry = () => {\n    let width = window.innerWidth - 16; // padding\n\n    setState({\n      ...state,\n      containerWidth: width,\n      geometry: JLayout(Geometries, { containerWidth: width })\n    });\n  };\n\n  useEffect(() => {\n    resizeGeometry();\n\n    window.addEventListener(\"resize\", resizeGeometry);\n  }, []);\n\n  let boxes = state.geometry.boxes.map((box, i) => {\n    let style = {\n      left: box.left,\n      top: box.top,\n      width: box.width,\n      height: box.height\n    };\n    return (\n      <img\n        key={i}\n        className=\"box\"\n        style={style}\n        src={props.data[i].url}\n        alt={props.data[i].alt}\n      />\n    );\n  });\n\n  return (\n    <div\n      className=\"wrapper\"\n      style={{\n        height: state.geometry.containerHeight + \"px\",\n        width: state.containerWidth + \"px\"\n      }}\n    >\n      {boxes}\n    </div>\n  );\n}\n","import React from 'react';\nimport Gallery from './components/Gallery/Gallery';\n// import { Link } from \"./components/Link/Link\";\nimport galleryData from \"./mockData/gallery.json\"\n\n\nexport const App = () => {\n  return (\n    <div className=\"App\">\n      {/* <h1>Justified Gallery</h1>\n      <h2>Intro</h2>\n      <p>Often, a marketplace like <Link href=\"https://matrimonybazaar.com\">ours</Link> requires a gallery component that makes the photos the hero of the page.</p>\n      <p>A <Link href=\"https://www.flickr.com/search/?text=sunrise\">justified gallery</Link> like the one <Link href=\"https://flickr.com\" >flickr</Link> popularised makes it easy to display images with varying aspect ratios.\n      </p>\n      <p><Link href=\"https://flickr.github.io/justified-layout/\">This</Link>library is pretty useful for implementing the layout.</p>\n\n      <h2>Problem Statement</h2>\n      <p>Write a component that takes a list of URLs like the one below to create a justified gallery.</p>\n      <p>The component to be implemented is in <code>components/Gallery/Gallery.jsx</code></p>\n      <p>The data is available in the <code>mockData/gallery.json</code></p> */}\n      <Gallery data={galleryData} />\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}